worker_processes 1;
error_log logs/error.log;
events {
	worker_connections 1024;
}
http {
	server{
		#	设置默认	lua	搜索路径，添加	lua	路径
		#lua_package_path	'lua/?.lua;;';
		#	对于开发研究，我们可以对代码	cache	进行关闭，这样我们不必每次都重新加载	nginx。
		#lua_code_cache	off;
		#	这个将为打开文件指定缓存，默认是没有启用的，max	指定缓存数量，
		#	建议和打开文件数一致，inactive	是指经过多长时间文件没被请求后删除缓存。
		open_file_cache	max=204800	inactive=20s;
		listen 8801;
		server_name localhost;
		charset utf-8;
		#	~	^/api/([-_a-zA-Z0-9/]+)
		location 	~ ([-_a-zA-Z0-9/]+) {
				content_by_lua_file	lua/$1.lua; ##http://localhost:8801/login?name=11&pwd=22
		}
		location /github {
				proxy_pass	https://github.com/;
				proxy_redirect off;
				proxy_set_header Host $host;
				proxy_set_header X-Real-IP $remote_addr;
				proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		}
		# 是针对一个确定的URI做了反向代理
		location /readme {
			proxy_pass 	https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md;
			proxy_set_header		X-Real-IP		$remote_addr;
			proxy_set_header	X-Forwarded-For	$proxy_add_x_forwarded_for;
		}
		location	~	\.(gif|jpg|png|js|css)$	{
			#root D:/OpenResty_x64_1.9.9/test/res/;
			root webroot/res/;
		}
		location    /download	{
					access_by_lua	'
						ngx.var.limit_rate	=	1000
					';
		}
		location / {
			default_type text/html;
			content_by_lua_block{
				ngx.say('HOST IP:' .. ngx.var.remote_addr .. '\n')
				ngx.say('PID:' .. ngx.var.pid)
			}
		}
	}
}